{
    "entries":[
        {
        "date":"08/19/2015",
        "title":"SQL && Linq && alumniNetwork || How I learned to stop worrying and love the unknown.",
        "text":"More than two weeks since my last post with three projects to talk about. I considered making each a separate post, but really its the cumulative experience of these projects over the weeks that have lead to the singular goal of turning me into a real world ready developer. In that sense the whole blog could have been a single post, but at this point it seems particularly appropriate to discuss a few things in a more cumulative sense.<br><br>Following our MVC_Salesforce project we tackled SQL Server databases. We covered structuring the databse appropriately via normalization, how to use primary and foreign keys to link tables, selecting from, modifying, and altering tables, and the difference between left, right, full, and inner joins. I was surprised, but I found manipulating SQL Server to be one of the easiest things we've done thus far. I would credit two major factors in that success - first, a complete lack of fear jumping into the unknown, and second, excellent documentation at W3.<br><br>We also covered the use of Linq for the purpose of filtering a CSV file of election polling data to predict the winner of the 2016 presidential election. The actual predicitive capability of the program was of course more a game based on a handful of polls than hard science; the point of the exercise was simply filtering with Linq. Initially, we covered three primary Linq functions mapping with the Select method, filtering with the Where method, and zipping with the Zip method. I also used a Linq Foreach along the way. Once I understood the pecularities of the syntax, most notably the => operator, I found Linq to be quite useful in shortening my code.<br><br>As I flip through my notes I realized we also covered higher order functions. This is an interesting concept that we completed a few lab exercises with, but didn't incorporate into any larger project. I made it through the labs fine, but I suppose don't understand them well enough to make regular or intuitive use of them just yet. We also made a Roamn numeral conversion program as an on-the-side coding challenge. I didn't get all the functionality I intended into this because I was wrestling with ideas about how to efficiently handle the conversion process rather than reliving my monolithic spelling-numbers lab from python. I enjoyed the design aspects of this project, though, and finally succeeded with intuitively understanding how to create an operator class that could be used to add any new characters with any new value to the Roman system.<br><br>Finally, we tackled our big capstone group project; creating a devCodeCamp alumni site using ASP.NET MVC. We began this project by choosing to work in areas that we hadn't spent much time on in our previous projects. For me that meant getting my hands on the back end. Ryan and I worked together building the database tables which went pretty quickly. Also, worked on a few of the controllers, and built a view model we needed for the admin edit page which was an aspect of the front end I built once the database was up and running. Ultimately, I ended up back on front end for final polish. The project included a number of new concepts for us including security, various role types for registered users, and the added pressure of having this project billed as a useable live site for the school. Finally, we presented this project to two companies at devCodeCamp's downtown location. We received great reviews for the presentation, and it clearly amplified how far we've come in these past weeks."
        },
        {
        "date":"08/03/2015",
        "title":"MVC/Salesforce Project",
        "text":"Presenting my latest project today: a web app written in ASP.NET MVC framework that includes Salesforce integration. Not a lot new from a classrom perspective, but probably the most difficult week so far. First, there was the matter of learning the MVC framework which we hadn't used previously. Then there was the matter of getting to know Salesforce well enough to do anything at all with it. These aspects, though, challenging were not the most difficult part, by now we've done so much with technology that we have no experience with a lack of familiarity is starting to feel comfortable. The most difficult part for me was the very different nature of manipulating the MVC framework. Visual Studio creates so much code for you that the task of programming with it is far more like trying to understand with no explanation code that someone else has written for you, then trying to add to it the additional functionality that you need for your specific task. I assume this is not unlike working with an organization's legacy code, and is perhaps the nearest simulation we've seen to the daily work of a real world developer. <br><br>For my project I focused on several key operations that seem to have the greatest relevance to a business environment:<br><br>First, I made small customizations to the website to re-learn how to do familiar things in an unfamiliar setting like redirect the target of a button click, add images, change links, etc. I then created two user entry pages to save data to my local database. Ultimately, I incorporated access to the local database via an admin panel that requires a login to access.<br><br> My primary login is via Salesforce, but I also added Google authentication for the practice of creating additional authentication options.<br><br> The Salesforce login gives the user access to default data within a basic developer account. I set up access to the Salesforce Accounts info via a tutorial. The challenge leftover from this is that the heavy lifting in the tutorial was done via a download install. From there in order to pull the contacts information I had to reverese engineer the code that was pulled in via the install, and determine what needed to be changed to get the contact info. It's proved to be quite a challenge learning to get inside someone else's code to make it do what you need, but eventually I solved this problem. The key detail seemed to be setting the namespace correctly on the new classes I was creating for my own modifications. Once I had that set up correctly the last details fell into place rather easily.<br><br> In the end the primary functionality of my app is to store user input to a local database, authenticate through Google and Salesforce, then via an admin panel retrieve the data from both the local database and the Accounts and Contacts pages in Salesforce."
        },
        {
        "date":"07/24/2015",
        "title":"Mobile News Feed Project",
        "text":"We've moved to a different form now for our blog posts. Instead of a daily reflection we're now doing end of project reflections. In this case we've just finished an individual project which simulates the connection between a phone and server which has news feed subscriptions. We covered a lot of ground with this one, so I'll run through a list for review:<br><br> 1 Design Patterns, canned effective solutions for common problems. We first discussed anti-patterns including the big ball of mud, the lack of a good pattern, God object, one giant class that gets passed around by everything, spaghetti code, code that is very hard to follow; use of go to's.<br><br> The useful patterns we focused on were: Factory, a class to create classes based on the circumstance - i.e. a switch case that governs factory output; Decorator, wrapping a class in layers to create a single object; Observer allowing a class to register with another class to receive updates - i.e. subscribe; and Proxy, wrap a class around another class to govern access to it - i.e. hide from the user the complexity of accessing a server.<br><br> 2 Code Smells, red flags in code that indicate an approach may not be correct including duplicate code; large methods, class, files, poor naming conventions; magic numbers, hard coded numbers with no obvious reason as to why they've been chosen; dead code, unused code; perhaps leftover from a previous state; high coupling, an absolute dependence between two parts; and low cohesion, cohesion is a positive functional relationship between two parts, but there is no absolute dependence.<br><br>3 Clarification that static means a class has only one instance that exists system wide. The public method of a static class can be referenced without instantiation.<br><br> 4 Learned about the hazards of premature optimization where optimization should only be done if necessary to avoid inefficient tinkering. We also learned about the optimization tools of parallelization, splitting the same or similar operations into pieces that run at the same time, and concurrency, the simultaneous running of different operations in multiple threads. In the midst of these things we also learned about time complexity, Big O notation, and practiced calculating the Big O notation for a variety of data types and sort methods.<br><br> 5 Finally, the biggest take away for me personally was the realization that program design - i.e. design patterns and their proper use is the aspect of development that I'm most excited about. The understanding of and proper consideration of design strikes me as holding the proverbial keys to the coding kingdom. Also, my background and interests as an artist have much more to do with design patterns than other, perhaps, more obvious correlations like front end design. The reason is that my fascination with both stems from a greater interest in the underlying structure of things. I believe absolutely that any creative medium can only be fully exploited when its building blocks and the nuances of their arrangement are deeply understood."
        },  
        {
        "date":"07/17/2015",
        "title":"Day 34",
        "text":"Spent my day getting PDF and CSV exports working. All are now functioning, and I moved on to generating graphs. Still have a fair bit of work to do to get the data out of the table correctly. As it stands we have a very fully developed piece of software. Long week; time for a break."
        },  
        {
        "date":"07/16/2015",
        "title":"Day 33",
        "text":"Finished the UI today, and got essentially all of the functionality hooked up. There are refinements that still need to be made in some of the data fields: formatting, changing cells, etc., but the software is essentially running as a viable product. I finished my day by beginning the export reports to pdf functionality. A little hung up on establishing an assembly which is needed for referencing pdf table creation. Think I'm going to pick this up in the morning. Starting to feel like the end of the week, and a long night is probably not going to help productivity tomorrow. I noticed what seems like a useful tutorial before shutting down. I may watch that tonight in preperation for the morning, but time for a little rest."
        },  
        {
        "date":"07/15/2015",
        "title":"Day 32",
        "text":"Continued progress with our vending machine software. Started the day by reworking the basic layout of the UI. I was thinking about the layout as something similar to a web page where content areas change on click, but the forms project I'm using doesn't allow this type of functionality (at least not in any way I've found to access). Ultimately, I reorganized the content into a series of tabs which does essentially what I had initially intended via a different control type. Once the layout was set the task was simply adding all necssary components, then hooking them up to the proper function calls. Not all data is filtered in the way it needs to be, but the foundations are there to show a final product. Tomorrow the task will be to generating reports such as profitability by machine, city, etc. Also, we need to add functionality so the business owner can create a new machine, and work on bonus features including a representation of a field tech interface as well as needs-service flags that could be used by administrators."
        },
        {
        "date":"07/14/2015",
        "title":"Day 31",
        "text":"Began a new group project today: building software for a vending machine company. I'm handling the GUI aspect which will provide access to business statistics, machine data, and stats by city. It's been a particularly frustrating day that feels exactly like pyGames day 1 - i.e. I need the same programming skills I've been working with, but they're in a different context which makes it difficult. The Visual Studio form builder also feels a bit clunky right now because I've never used it. In this case the challenge has really ended up being trying to figure out how to code in a new context while also figuring out how to use a new aspect of the software which has a lot of unfamiliar functionality. Need to step away, and refocus for tomorrow."
        },
        {
        "date":"07/13/2015",
        "title":"Day 30",
        "text":"We started our first C# group project today: a remaking of our earlier Lemonade Stand effort, but with more features. I wrote a few small class stubs for ingredients, but my main contributions were writing the Player, Shipment, and Weather classes. The Player class was our solution to the establishment of the lemonade stand while allowing for the recording of high scores and multi-player games. The Shipment class was established to facilitate a link between the supplier and the stand, and also to add the assignment requirement of allowing for multi-day shipping times based on comparison between stand and supplier locations. The Weather class is the primary demand generator where the total number of potential buyers is a product of the temperature and precipitation. The demand level is created by using the randomly generated temperature, and increasing demand for sunny days by 20 percent then decreasing demand by 20 percent for rainy days. Ultimately, the weather demand generator will by used further in the Customer class to establish an individual's willingness to buy which will adjust based on the relationship between weather and price."
        },
        {
        "date":"07/09/2015",
        "title":"Day 28",
        "text":"Today was the last lecture heavy day during our first week of C#. Following our format of learning more advanced concepts first we're now down to more simple aspects including data types, constants, loops, and flow control. We then moved on to simple constructs including special operators (mainly nullable types), enumeration, accessors, iterators, arrays, and lists.<br><br>We began our calculator projects in the morning, and continued throughout the day. I began by trying to make the simple addition of two numbers work. After getting this handled I graduated to adding any length of a string of numbers. I've also gotten this to work, and have tidied up the code a bit by creating a FunctionCall class which takes most of the bulk of my code out of the main loop. My challenge now is how to handle a string of inputs with multiple operands. I'm skipping the business of pure substraction, multiplication, etc. because these would be relatively simple copy/pastes which ultimately don't solve the bigger problem. I'm not sure how to address the issue just yet. I think the trick may lie in string manipulation, but we'll see."
        },
        {
        "date":"07/08/2015",
        "title":"Day 27",
        "text":"Left the lab at 9:15pm last night. At that point I felt I had a solid understanding of the class elements I had established. My project ended up being rather simple, but I think that was best for a first effort at programming in C#. In the end I had built the required IPart and IPowerSource interfaces along with the required abstract robot class. I then made two robots which inherited from the Robot class, two different parts that were specific to each robot child, and two different power sources that could be used by either robot. I set the program to run with a number of random operations where in the first place the program would randomly generate one robot our the other, print that it was running, consuming power, using power at a certain rate, and declare a state of repair. Today was mostly about lectures and new material: testing and complex constructs (mutability, exceptions, generics, and attributes). We created a UML for our robots project as well as built a few unit tests. Our new project is to build a calculator where the emphasis - because the functionality is so simple - is to be placed on advanced structural design."
        },
        {
        "date":"07/07/2015",
        "title":"Day 26",
        "text":"Started C# today. First half of the day was an excellent lecture covering class data structure. Started writing code after lunch, and felt like I really understood what I was doing. Unfortunately, I was going down the wrong rabbit hole in terms of practical implementation. The project is to create a robot object with an abstract robot class and two interfaces: one for power supply, and one for parts. I had initially set everything up very quickly, and printed lines to the console. Unfortunately, I hadn't properly established my abstract class, and needed to do some serious reconfiguration which invloved syntax that I couldn't figure out how to navigate. After a rather complex series of hints and instructions I was able to get everything worked out into the structure and syntax needed. I'm now going to take a few documentation-type notes on this code, and finish out the last parts needed to complete the assignment. I'm struggling to recount this in greater detail because the details remain vague, but the two greatest challenges specifically are the strange (to me) way in which variables are declared, and the highly object oriented nature of the language."
        },
        {
        "date":"07/06/2015",
        "title":"Day 25",
        "text":"Wrapped up our survey project this morning with a respectable MVP. The project has been tricky because of the high degree of interactivity required between our various code sets, and especially with the Mongo database. It's been particularly difficult trying to write code for pieces of the puzzle which are incomplete - i.e. trying to collect and save data with a placeholder form while the dynamic functionality of that form is being built. In the end I think the team communicated very well, and built a lot of functionality in just a handful of days.<br><br>... and with that our time focusing on Javascript is complete. I'm looking forward to beginning C# tomorrow, and taking on the next challenge. Ultimately, I think I will be spending quite a bit more time with web technology because of the nature of my personal project, but for now it's on to the next thing."
        },
        {
        "date":"07/02/2015",
        "title":"Day 24",
        "text":"Finishing up the front end work for the survey project. Managed to get most of the interaction working. The load feature now displays a list of surveys by title that are in the database, and gives the user the option to choose which one to load. Ryan and I spent most of the morning and early afternoon working the two sides of this loading functionality where he was trying to incorporate his constructor templates with the menu selectors, and I was trying to read the data to display the actual database entries in an accessible format. My next task is to read the inputs from the survey taker page, and form the JSON file for shipment to the database. Spent most of my afternoon studying the data structure, and figuring out how to actually access and modify it. This was no small task for me as this is what I struggle with most: the literal syntax of accessing data structure. Monday morning we should be able to put the finishing touches on it, and have a working MVP before moving on to C# on Tuesday."
        },
        {
        "date":"07/01/2015",
        "title":"Day 23",
        "text":"Full time now on the survey project. Started the day with a few layout issues on my webpage. I was able to clean up the html and css which better organized the code and solved the problem. As Ryan and I began integrating what we had both been working on I realized there was still a formatting issue related to building the sidebar. As the sidebar grew it continually pushed the question blocks down. The solution wasn't obvious, so I had to dive back into the details of the code, and undo a lot of what I had in place. Ultimately, I relaized the main problem was in the relationship between sidebar and question block parent elements. Fixing the position of the sidebar also caused a change in the size of its parent element which necessiated a few unexpected changes in the css sizing. Ending the day by wrapping up a few user interface items like changing the title by clicking, and populating the sidebar with the new value. Tomorrow I'm going to focus on creating the page for the individuals who are taking the survey, continue integration with Ryan's functions, and work on tweeking UI elements as time permits."
        },
        {
        "date":"06/30/2015",
        "title":"Day 22",
        "text":"Finished the blog project first. A few minutes of work and the removal of whitespace was taken care of. From there I started the writing of a few basic survey build functions for our group project which was intended to help understand the way in which our data file is accessed. I hadn't spent much time on this when I realized it all seemed like wasted effort without an actual page to display the results, so I dove back in to a number of html and css tutorials I had done in the past to remind myself how to structure and style content in a usable way. This task accounted for most of the rest of my day, and we now have a respectable looking web page to display our functionality. Tomorrow I'll be writing the jquery event listeners that will trigger the build functions. Ryan and I will be working closely to incorporate this complete set of functionality. For the time being I'll have to set a few of the buttons to dumby page loads, so we have a placeholder that will ultimately be replaced by saving and loading functionaility."
        },
        {
        "date":"06/29/2015",
        "title":"Day 21",
        "text":"Spent the morning working on my blog project. The search function is now essentially complete, I have to add the feature that disregards whitespace, and I have one little bit of buggy functionality related to backspaces in the secondary search field. I don't think either of these issues will require much time to resolve.<br><br>We started a new group project today building an application that allows a user to create survey forms. I started by writing a basic html structure to begin testing navigation functions for adding questions to the survey as well as displaying a sidebar overview that will functiona primarily for bookmark reference. I still need to work on adding new questions, and properly displaying the question panes. Will need to work out better styling soon, but for now trying to address the larger problems."
        },
        {
        "date":"06/26/2015",
        "title":"Day 20",
        "text":"Finished the pagination for my blog. Ultimately, no small feat. Not sure how many hours I had in that part of the project, but it took quite a while. Last night I was struggling to clear the old posts on a new page selection, then I realized I had a few things out of order, and once the code was straigthened up I was able to use .empty() to clear the old posts without wiping out things I wanted to keep. After finishing pagination I moved on to the search function. I found a good example of sample code, but need to figure out how to incorporate the functionality into my own site. I was just starting to get into this when we got a new assignment: create a building cost calculator for a theoretical cube house. I really felt good about this one. I saw the project clearly, and finished before the day was over. Wrote a lot of functions, and got them to work while also updating html input fields. Finished with an excellent scrum. Time to go home."
        },
        {
        "date":"06/25/2015",
        "title":"Day 19",
        "text":"Almost 9pm. Latest I've stayed in a couple of weeks. Trying to get my blog pagination to work. Almost there. Can't get the entries to refresh when I change pages. Need to leave.<br><br>Moved slowly today. Stopped thinking about where I was in relation to others. I think my solutions are relatively clean. Perhaps the product of making a slow and steady effort. Really should write more, but I'm fried. Will stare at code for another few minutes then I have to leave. Need to finish this tomorrow, and start working on the search function."
        },
        {
        "date":"06/24/2015",
        "title":"Day 18",
        "text":"Wildly frustrating day.<br><br>Spent almost my entire morning on an HTML form tag issue. The web page was constantly refreshing itself, and overwriting the inputs I needed to use. We found a few work arounds: the simplest was removing the form tag, another was to override the default behavior. Ultimately, and onsubmit feature was found that can call a function directly from the HTML.<br><br>Spent almost my entire afternoon trying to take the name of an object into a form input, then display its attributes without displaying every other objects attributes. I had been using a series of loops to iterate through an array of objects, but ultimately solved the problem by creating a parallel array containing the name attributes of each object, and using the .indexOf() function to check if the input name was in the list of names, and then if it was I set a variable called index equal to the index position of the name which I then used to access the object name from the object's array, and print its attributes to the console.<br><br>I hear tomorrow's lab is a JSON project that has plenty of twists. Need rest."
        },
        {
        "date":"06/23/2015",
        "title":"Day 17",
        "text":"<br>I'm definitely happy to be working with Javascript. It's more familiar to me than Python, but in particular I'm much happier with the Javascript loop syntax. Being able to establish (with a for loop) an iteration variable, while statement (of a sort), and increment value within the establishment of the loop is far more intuitive to me than needing to iterate through a list with something like for & each.<br><br>The day was primarily consumed with lab work. Most of it was relatively easy, but I got hung up for a while trying to calculate the months, days, minutes, and seconds between two dates. Ultimately, I managed relatively concise working code, though, it doesn't take into account the varied lengths of the different months. I found a way to handle this, but it was quite complex, and would take more time to study than fits the context of basic lab work which did not require the conisderation of variation in the length of the months. I'll revisit it as needed in the future.<br><br>Near the end of the day we had a unique group coding challenge where we paired up and tried to write code that could not be deciphered by another group. Marc and I tried to double a given variable while disguising this operation. We ultimately succeeded by making a messy function named kevin that output the number 2 by absurd means. We then stored the output of kevin into a variable lll that we fed into a second function called pete which multiplied our variable by kevin. Entertaining to say the least!"
        },
        {
        "date":"06/22/2015",
        "title":"Day 16",
        "text":"Familiar territory today. As a precursor to Javascript we spent the day with HTML and CSS. Coming into class CSS is what I had used more than anything else. This familiarity lead to frustration mostly. First, because it wasn't anything new. Second, because it's been six months since I've actually used it which means I have a recollection of all the great features available, but no real memory of how to implement most of them. Nevertheless, I managed a respectable reworking of my new website homepage. I focused primarily on adding background colors to the top and bottom blocks of text while also using the border-radius property to clip the corners of these backgrounds. I also added box and text shadows to add a bit of depth to the appearance. We ended the day with our introduction to Javascript via two lectures and one short coding challenge where we simply displayed Hello World in an alert dialog box. We've been given permission to leave early today. I'll probably take advantage of that, but will likely preview our new labs first. Looking forward to the challenge of Javascript, although, I've actually spent almost as much time with Javascript as CSS. I say challenge, though, because I'm sure we'll be using it in ways that will stretch my ability to think about problems in the most efficient way."
        },
        {
        "date":"06/19/2015",
        "title":"Day 15",
        "text":"Wrapped up the asteroids game today. Mike added an id tag to the explosion class so I could differentiate between asteroid and ship explosions. The ship is now the only element with the dramatic explosion. Also, needed to finish the power up graphics assets; added the power up icon, a laser wave bullet upgrade, and bubble shield. At the end of the day I had a little time to add the hunting game easter egg I had wanted. The easter egg works by - within a set score range - changing the ship into a man with a hand gun, the star field into a grassy field, and the asteroids into cattle (wanted to make it more of a safari-type hunt, but I couldn't find good sprite assets for that). We also took a field trip to PK Ware. It was interesting to see a working operation and ask a few questions. I ended the day by volunteering to go first for our python final exam. It took about an hour. I struggled with a few particulars especially a proof problem. Ben mentioned he's actually taking it out of the exam because it's too hard. Suppose there's nothing wrong with having struggled then.<br><br>Feeling exhausted, but very satisfied. We made a great product with our asteroids game, and I made gigantic progress this week with my understand of data structure and interactivity."
        },
        {
        "date":"06/18/2015",
        "title":"Day 14",
        "text":"Long day, but a lot of success progressing our asteroids game. We have a full game style format including score, lives, game over screen, and high scores. I had a lot of code work getting the last bits in: checking lives, updating score, switching graphics on collisions, printing game over screen, and high scores. Also, included ship graphics for invicibility on respawn and a thrust flame. Spent a while trying to add a ship explosion graphic, but I've realized that I need some way to identifiy the type of explosion - i.e. ship or asteroid<br><br>... actually, jumped back into the code, and added the ship explosion outside of the if statement in which the the ship Explosion group object is created. This doesn't function the way I intednded, but it's actually a nice effect. My intention was to create a ship explosion more dramatic than the asteroid explosion, so I tripled the size of the graphics. The problem I'm having is that I either don't have a way, or I don't know the way to check whether or not the explosion was tied to a ship or an asteroid, so every time the game loops through the smaller asteroid explosion overwrites the larger ship explosion. For the time being I've simply set both explosion sequences in the outer loop of the display screen function with the larger explosion second. The result is that everytime anything blows up there's a flip between large and small graphics. As I mentioned it's a nice dramatic effect, but I need to figure out how to do what I originally intended, compare the two, and decide which to keep."
        },
        {
        "date":"06/17/2015",
        "title":"Day 13",
        "text":"A rough start to the day that we completely turned around into a great ending. The morning was almost enitrely consumed by source control issues. The git command line process we were using turned into a nightmare of out of sync updates. After getting things under control we started using a more streamlined process using Source Tree and pushing directly into the common repository. Once we managed to get the morning behind us we made great progress with our asteroids game. By the end of the day we could fly the ship, shoot, a laser, and have the asteroids disappear on collision with the laser. My work started with getting all graphics functions into my code as the splash screen was still in the engine file. A simple process, but I did add two functions to make coding the estalishment of the screen a little less redundant. As the day progressed Mike changed what had been class objects into Sprite groups which necessitated different handling in the graphics functions. I also added a function to detect collisions based on work that had been completed with the asteroid class. We have a few lag issues that we realized are a product of debug prints. Ultimately, we'll remove the debug prints, and alter speed variables as needed. Tomorrow my goals are establishing a scoreboard, lives counter, invicibility on respawn to avoid being immediately smashed by an asteroid, establishing collision detection between ship and asteroid, adding an explosion graphic, and creating an image for ship thrust. As a team our goal is to have a working game structure - i.e. a beginning and end with a score, life counter, and more asteroids."
        },
        {
        "date":"06/16/2015",
        "title":"Day 12",
        "text":"Watched 10 tutroials in a pyGame series last night and this morning. The videos were simple and well put together, and really helped me to understand how what I had just started learning about data structure fits into pyGames. I spent today working on gathering graphics and writing the functions to implement the graphics display in our Asteroids game. Everything fell into place pretty nicely, and it didn't take too much time working with Mike to make my functions integrate with the main game engine. I spent more time than I had wanted cleaning up some of the graphics, and I'm still not happy with all of them, but I'm also trying to avoid getting too bogged down with things that aren't overly important right now. The graphics can be made cleaner later. I'm really trying to stay focused on learning the code.<br><br>Tomorrow, my goal is to pull the start up screen functionality into the grahpics function as it's still in the main engine. Our goal as a group for tomorrow is to get a clean playable first iteration that goes beyond the basic fly and gather asteroids functionaility of today's build. Shouldn't be too hard as we've made significant progress thus far. I'm going to spend a little time studying the other's code as I still don't understand all of the functionality they've built in, and the what and why of that functionaility. All totaled it's been a good day making progress toward understanding."
        },
        {
        "date":"06/15/2015",
        "title":"Day 11",
        "text":"Came in to the day feeling a good sense of success from last week. Then, of course - as Monday goes - a new assignment with a problem that I'm not even sure how to think about. I assume this week will be something like last: struggle like hell for three days, finally start to grasp things, then begin to feel comfortable just in time for next week to start, and begin the whole process again.<br><br>pyGames is the new problem for this week. A graphics application that we're using to build an Asteroids clone. I'm handling the graphics assets, and will need to build the library and handle displaying the objects. I've found a series of video tutorials that should help me understand the basics. Unfortunately, most documentation is difficult to find anything meaningful in, and many code examples are only substantially useful if what you need to do is very much like what the code is pre-designed to do. The broader concepts, and how to manipulate the various functions - and what the functions are in the first place - often remain difficult to find and understand. I've said it before, and nothing has changed: learning to code is a substantially difficult exercise in learning not simply how to code, but - in the first place - how to think. I have no doubt that I'll figure this process out, but it is certainly the most difficult thing I've done.<br><br>My goal for tomorrow is to take what I learn from tutorials tonight, and understand to display and change objects on the screen. Ultimately, I don't think my code will be responsible for moving the objects, but I need to know how to do it so I can better see the interactions that will be necessary for my contributions."
        },
        {
        "date":"06/12/2015",
        "title":"Day 10",
        "text":"Started with quite a bit of work to finish. Eventhough, happy numbers was out of the way I still had two labs to finish. Spent forever writing the spelling-numbers-in-words task. I began that project with the idea to convert a number to a string, split it into groups of 3, then evaluate those groups and length of the total list. The problem was that breaking the number into list groups left any odd number attached to the right side of the list rather than the left. I was able to invert the number, then group, and flip it back. This worked, and I thougt I had things figured out until I realized any numbers ending in zero resulted in the stripping of the zeros during the flipping process. Ultimately, I managed working code. It was bulky, but on the up side it was bulky because of all the functions I used. A significant improvement from fumbling around with functions just a week ago.<br><br>Completed our second white board challenge which invloved creating two class objects: Ant and Colony. I was rolling through it until I hit the final requirement which was to establish that a worker and a queen could reproduce. Initially, viewed this as a method of the colony because I saw it as a function of population, but ultimately once I had written the function I could see it fit as belonging to the ant class since the process creates a new ant before it creates a population increase.<br><br>Ended the day with an assignment to create or own version of the game Lemonade Stand. I have my class objects created and the intial game spin-up. Hope to make some progress over the weekend if I can squeeze it in between appraisal work and remodeling decisions."
        },
        {
        "date":"06/11/2015",
        "title":"Day 9",
        "text":"Happy Numbers is finished! My problem about how to keep evaluating numbers was solved when I realized I could iterate through a list of numbers to evaluate, and simply feed the iteration into my mainFunction as the primary input. It contiues to amaze me how simple some of these solutions are once you've realized how to think about them.<br><br>At the lab late again last night working on the GUI for my color analysis tool. Finished this morning with a respectable functional first iteration. The interface includes a five swatch color scheme across the top, a large central color swatch in the middle, and the RGB information of each of the scheme colors. The color scheme swatches change on an Enter press when new numbers are entered in their respective fields. The large swatch then averages all RGB values, displays the equivalent color, and prints its RGB values.<br><br>Need to make a lot of progress on labs now. A little behind because of how long it took to get through happy numbers. Also, need sleep tonight. Will have to find a balance."
        },
        {
        "date":"06/10/2015",
        "title":"Day 8",
        "text":"Solved a major problem with the happy numbers problem. I couldn't get the function to continually evaluate a new input after the first iteration through the squaring, summing, and eval process. I spent hours yesterday trying to figure out how to take new input, and place it back into the function call to get it to re-run the analysis with the new number. I was fixated almost literally on the spatial problem of how to move my new input from the bottom of the mainFunction back to the top where it was called. In the end the simple answer was move the function down - i.e. recall the function with the new input immediately after the new input was established. This example is a good expression of one part of my primary challenge to see not just the underlying data structure of the problem, but also the interconnectedness/interactivity of the parts which go on top - i.e. the classes, functions, loops, etc. It's occurred to me that the two are very closely related. It's difficult (and maybe not fully possible) to see the entirety of the underlying structure without also being practically aware of how the pieces will interact. Not that it's necessary to know what all of the pieces are, but a solid understanding of how they work seems essential to understanding structure because the nature of those interactions will ultimately necessitate certain key features of the structure.<br><br>Also, laid out substantially the primary ideas behind my color analysis tool. Working on the advice to begin with the highest risk element of the project - i.e. the thing that I have no experience with. In this case it's a GUI. Mostly finished with a tutorial, and will be finished before the day is over. From there the main task will be to modify the example code in the tutorial to match my specific needs.<br><br>Also, need to get a lab or two complete before I get too far behind there. I've definitely taken a lot in over the last couple of days, but I still have some brain synapses that need to work out their rewiring. It seems there are aspects of coding that literally require changes in fundamental thinking."
        },
        {
        "date":"06/09/2015",
        "title":"Day 7",
        "text":"Worked primarily on happy numbers today. A little on our game too, but was struggling a bit. Wrote a function to reply play again or declare game over. It's occurred to me that code is often more readable backwards. Even the problem solving process seems to work better in reverse - i.e. coding a function to process the ultimate solution, then a function for the process before, etc. Having realized that learning to see structure is my primary need should help me focus on how to better approach things moving forward. The analogy of a tree strikes me as particularly relevant where the tree and branches are the underlying data structure, and the fruit that would hang on the tree is the various bits of code. I can live without knowing what all of the fruit is or where it goes, but I have to learn to see the tree."
        },
        {
        "date":"06/08/2015",
        "title":"Day 6",
        "text":"Starting to think I've over shot with my attempt to simplify my code writing. I've essentially banished all if/elif/else statements in exchange for functions and loops that I can't entirely figure out how to use. The logic is clear enough, and I'm getting the hang of scope and syntax, but I think ultimately the shorthand is unnecessarily short. It's left me stuck trying to do too many things that at this point are not intuitive at the expense of those things that are intuitive. Importantly, the intuitive things are usable which leaves the entire exercise creating more problems than not. It's obvious I need to find a balance"
        },
        {
        "date":"06/05/2015",
        "title":"Day 5",
        "text":"A lot of progress today. Moving into late yesterday afternoon I<br>was struggling to see anything in terms of functions and loops.<br>Started understanding it before leaving yesterday, and actually<br>woke up at 1:30am with an idea about how to substantially shrink<br>my dice rolling function. Initially, I had established a separate<br>random number generator for each of the six die. While sleeping I<br>came up with:<br><br>from random import randit<br><br>def dieRoll(dieSelection):<br>roll=randit(1,dieSelection)<br>return roll<br><br>Spent all of today re-writing the dice program in functions and<br>loops that operate with a Player class object. Still using a little<br>longhand thinking in that I am taking player name input in one<br>function, then converting it to an object in another:<br><br>#get player names<br>def getNames(i):<br>playersList=[]<br>while len(playersList)<i:<br>input = raw_input(\"Player enter your name >\")<br>playersList.append(input)<br>return playersList<br><br>use playersList to create objects<br>def convertToObjects(pL):<br>playerObjects=[]<br>for i in pL:<br>player = Player(i)<br>playerObjects.append(player)<br>return playerObjects<br><br>Also, taking in number of players separately:<br><br>#get number of players<br>def numPlayers():<br> input = raw_input(\"Enter number of players >\")<br>input = int(input)<br>return input<br><br>Eventhough, all of these things could be done separately there is, for<br>now anyway, use for me in thinking about every aspect of the program<br>separately, and writing them as individual functions."
        },
        {
        "date":"06/04/2015",
        "title":"Day 4",
        "text":"Spent all day with dice game; miles from being finished.<br>Was flying this morning, but flying with longhand code writing.<br>Inevitably, I hit a point where I couldn't continue. I'm now<br>struggling like crazy to think in functions and loops rather<br>than longhand logic."
        },
        {
        "date":"06/03/2015",
        "title":"Day 3",
        "text":"Partly a carry over from yesterday, but finished cleaning up<br>code late last night to determine whether or not a number is<br>equal to or with two digits of a multiple of ten. This required<br>the realization that the remainder (modulo) isn't simply a concept<br>for the fourth grade. Initially, I had divided my number input by<br>10 and realized the decimal place of the target numbers was always<br>.8, .9, 0, .1, or .2. Had code written relatively quickly to use<br>this pattern, but a rounded area somewhere within the machine prevented<br>it from working properly. Eventually, decided to make friends with<br>modulo, and the solution was relatively simple. The same pattern<br>remained the answer, but without the decimal points - i.e. 8, 9, 0, 1,<br>2. Ryan had worked on the decimal solution overnight, and found<br>\"import decimal from Decimal\" to be useful, though, it wasn't entirely<br>clear whether or not lingering issues remained.<br><br>Pared down script from late last night to validate the format of an email<br>address. I had a very bulky solution last night, and one that didn't<br>catch all errors. Used .split(\"@\") to separate mailbox from domain portions,<br>and len(emailSplit) to evaluate portions of the address in addition to<br>checking for the presence of \"@\", ensuring there were 2 list items in the<br>split, and checking for specific characters. The bulkiness of last night primarily<br>came from the method by which I was trying to exclude numbers from the first characters<br>position in the mailbox portion of the address. Ultimately, .isalpha() saved the day.<br><br>This morning's lecture covered functions. I understand the concept pretty well,<br>but their implication is trickier than it would seem. We started writing code<br>for a relatively tricky dice game that we invented. I feel like I need loops<br>to pare down this code. I have functions in place, but their guts still seem very<br>bulky. My approach to labs so far has been to get the inputs working as a set<br>up to easy access to the data later."
        },
        {
        "date":"06/02/2015",
        "title":"Day 2",
        "text":"Second day. Overall more interesting, and more comfortable.<br>Less setting up of accounts, and more code writing. It's always<br>a fog trying to remember exactly what we've done. Spent a lot<br>of time playing with iPython Notebooks; tinkering with formatting<br>and output. First AOYO lab covered computing string length, adding<br>a string to a variable input for a combined print statement, returning<br>a specific term within a list, and stripping the first and last<br>terms from a list print list[1:-1].<br><br>Second lab dealt with condition execution: if, elif, else. Covered<br>comparison operators. TURN OFF TABS. Learned the importance of<br>indentation (nested decisions), capitalization. Covered one, two,<br>and multi-way decisions. Labs ranged from intuitive and satisfying<br>(if/else squirrel play given season) to extremely frustrating, and where<br>I'm still stuck evaluating a numbers relationship to a multiple of 10.<br>I have an idea that seems to be getting upended by rounding issues.<br>Probably need to use modulo. Very little experience with this as<br>an actual mathematical tool.<br><br>Need to dig a little more deeply into some of these less familiar concepts."
        },
        {
        "date":"06/01/2015",
        "title":"Day 1",
        "text":"5:36pm, Day 1; feels like the end of the day. A few familiar things, but mostly not.<br><br>Worked with some basic code modifications and running an application on Twitter.<br>The process is mostly a fog, but I think that's partly because of its relative simplicity.<br>At least to the extent that we didn't write any code just made a few modifications,<br>and set up a lot of accounts to make the thing run.<br><br>Second lab was Git based. A little confusing in that there are multiple ways of doing<br>the same thing that seem instinctively to be unrelated. Apparently, there are also<br>different versions of essentially the same thing and some work while others don't<br>- i.e. an incorrect command prompt based on the lack (or maybe presence) of a security<br>certificate (or some such thing). A big part of the challenge of learning to code<br>seems to be understanding not simply the interconnectedness of the various components,<br>but also the multitude of ways the same task can be accomplished and choosing the best approach<br>for a given task.<br><br>Spent forever trying to add a simple text file to a GitHub repository with SourceTree. Ultimately,<br>the solution was simply to create a text file, and save it in the same directory as<br>the repository.<br><br>By 8pm the very basics of SourceTree are making sense.<br><br>Tired; satisfied."
        }
    ]
}